import { Type } from '@nestjs/common';
import { ModuleRef } from '@nestjs/core';
import 'reflect-metadata';
import { IQuery, IQueryBus, IQueryHandler, IQueryPublisher, IQueryResult } from './interfaces';
import { ObservableBus } from './utils/observable-bus';
export declare type QueryHandlerType<QueryBase extends IQuery = IQuery, QueryResultBase extends IQueryResult = IQueryResult> = Type<IQueryHandler<QueryBase, QueryResultBase>>;
export declare class QueryBus<QueryBase extends IQuery = IQuery> extends ObservableBus<QueryBase> implements IQueryBus<QueryBase> {
    private readonly moduleRef;
    private handlers;
    private _publisher;
    constructor(moduleRef: ModuleRef);
    /**
     * Returns the publisher.
     */
    get publisher(): IQueryPublisher<QueryBase>;
    /**
     * Sets the publisher.
     * Default publisher is `DefaultQueryPubSub` (in memory).
     * @param _publisher The publisher to set.
     */
    set publisher(_publisher: IQueryPublisher<QueryBase>);
    /**
     * Executes a query.
     * @param query The query to execute.
     */
    execute<T extends QueryBase, TResult = any>(query: T): Promise<TResult>;
    bind<T extends QueryBase, TResult = any>(handler: IQueryHandler<T, TResult>, queryId: string): void;
    register(handlers?: QueryHandlerType<QueryBase>[]): void;
    protected registerHandler(handler: QueryHandlerType<QueryBase>): void;
    private getQueryId;
    private reflectQueryId;
    private useDefaultPublisher;
    private getQueryName;
}

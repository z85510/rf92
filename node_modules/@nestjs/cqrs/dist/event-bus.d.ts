import { OnModuleDestroy, Type } from '@nestjs/common';
import { ModuleRef } from '@nestjs/core';
import { Observable, Subscription } from 'rxjs';
import { CommandBus } from './command-bus';
import { IEvent, IEventBus, IEventHandler, IEventPublisher, ISaga } from './interfaces';
import { UnhandledExceptionBus } from './unhandled-exception-bus';
import { ObservableBus } from './utils';
export declare type EventHandlerType<EventBase extends IEvent = IEvent> = Type<IEventHandler<EventBase>>;
export declare class EventBus<EventBase extends IEvent = IEvent> extends ObservableBus<EventBase> implements IEventBus<EventBase>, OnModuleDestroy {
    private readonly commandBus;
    private readonly moduleRef;
    private readonly unhandledExceptionBus;
    protected getEventId: (event: EventBase) => string | null;
    protected readonly subscriptions: Subscription[];
    private _publisher;
    private readonly _logger;
    constructor(commandBus: CommandBus, moduleRef: ModuleRef, unhandledExceptionBus: UnhandledExceptionBus);
    /**
     * Returns the publisher.
     * Default publisher is `DefaultPubSub` (in memory).
     */
    get publisher(): IEventPublisher<EventBase>;
    /**
     * Sets the publisher.
     * Default publisher is `DefaultPubSub` (in memory).
     * @param _publisher The publisher to set.
     */
    set publisher(_publisher: IEventPublisher<EventBase>);
    onModuleDestroy(): void;
    /**
     * Publishes an event.
     * @param event The event to publish.
     */
    publish<TEvent extends EventBase, TContext = unknown>(event: TEvent, context?: TContext): any;
    /**
     * Publishes multiple events.
     * @param events The events to publish.
     */
    publishAll<TEvent extends EventBase, TContext = unknown>(events: TEvent[], context?: TContext): any;
    bind(handler: IEventHandler<EventBase>, id: string): void;
    registerSagas(types?: Type<unknown>[]): void;
    register(handlers?: EventHandlerType<EventBase>[]): void;
    protected registerHandler(handler: EventHandlerType<EventBase>): void;
    protected ofEventId(id: string): Observable<EventBase>;
    protected registerSaga(saga: ISaga<EventBase>): void;
    private reflectEvents;
    private useDefaultPublisher;
    private mapToUnhandledErrorInfo;
}
